"""В данном скрипте использована функциональная парадигма
программирования. Это можно увидеть по следующим признакам:
1. Lambda функция: В скрипте используется lambda функция
для определения функции вычисления корреляции Пирсона.
Lambda функции являются основным инструментом функционального
программирования в Python, позволяя создавать анонимные функции.
2. Использование функций высшего порядка: Функция np.corrcoef
используется для вычисления корреляции Пирсона. Это хороший пример
использования функции высшего порядка, так как она принимает
другую функцию (или переменную, содержащую функцию) в качестве аргумента.
3. Отсутствие изменяемого состояния: В функциональном программировании
изменяемое состояние является нежелательным. В данном случае отсутствует
изменение состояния переменных array1 и array2 после их определения,
что соответствует функциональной парадигме."""
import numpy as np

# Зададим два случайных массива (в данном случае numpy массивы)
array1 = np.array([2, 4, 6, 8])
array2 = np.array([2, 4, 10, 12])

# Используем lambda функцию для вычисления корреляции Пирсона
pearson_corr = lambda x, y: np.corrcoef(x, y)[0, 1]

# Рассчитаем корреляцию Пирсона между двумя массивами
result = pearson_corr(array1, array2)
print("Коэффициент корреляции Пирсона между двумя массивами:", result)
